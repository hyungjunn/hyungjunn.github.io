---
layout: post
comments: true
title: "2주차 과제 : 자바 데이터 타입, 변수 그리고 배열"
excerpt: "자바의 프리미티브 타입, 변수 그리고 배열을 사용하는 방법을 익힙니다."
date:   2024-01-05 11:17:00 
mathjax: false
---

#### 본 게시글은 백기선님의 자바 라이브 스터디를 진행하기 위한 정리 자료입니다.

#### 링크
[시즌1 자바 기초 스터디](https://github.com/whiteship/live-study/wiki/%EC%8B%9C%EC%A6%8C-1-%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88-%EC%8A%A4%ED%84%B0%EB%94%94)

#### 목표
자바의 프리미티브 타입, 변수 그리고 배열을 사용하는 방법을 익힙니다.

#### 학습할 것
- 프리미티브 타입 종류와 값의 범위 그리고 기본 값
- 프리미티브 타입과 레퍼런스 타입
- 리터럴
- 변수 선언 및 초기화하는 방법
- 변수의 스코프와 라이프타임
- 타입 변환, 캐스팅 그리고 타입 프로모션
- 1차 및 2차 배열 선언하기
- 타입 추론, var
---
#### 프리미티브 타입 종류와 값의 범위 그리고 기본 값
크게 논리형(boolean), 문자형(char), 정수형(byte, short, int, long), 실수형(float, double)로 나뉜다.

- byte : 8비트. -128 ~ 127. 메모리 절약이 필요한 큰 메모리 배열에서 필요함.
- short : 16비트. -32,768 ~ 32767. 마찬가지로 메모리 절약에 쓰임.
- int : 32비트. -2^31 ~ 2^31 - 1.
- long : 64비트. -2^63 ~ 2^63 - 1.
- float : 32비트 IEEE 754 부동 소수점.
- double : 64비트 IEEE 754 부동 소수점.
- boolean :  1byte. true or false.
- char : 단일 16비트 유니코드 문자. 최솟값 ‘\u0000’ 최댓값 ‘\uffff’


 int형의 경우 32비트이므로 2^32가 범위의 크기가 되고 실제로 -2^31 ~ 2^31 - 1의 범위가 나온다. (0을 포함해야되서 최댓값에서 1을 빼준다.)

|Data Type|기본값
|---------|-----
|byte     |0
|short    |0
|int	  |0
|long	  |0L
|float	  |0.0f
|double	  |0.0f
|char	  |'\u0000’
|String	  |null
|boolean  |false

#### 프리미티브 타입과 레퍼런스 타입
다섯가지의 레퍼런스 타입(reference type)이 있다.

- Class : 일종의 설계도(Blueprint)같은 개념으로 객체를 정의한다.
- Array : 같은 타입의 여러 변수들을 하나로 묶은 것.
- Annoattions : 프로그램에 대한 데이터를 제공한다.(1. 컴파일러를 위한 정보 2. 컴파일 시간 및 배포 시간 처리 3. 런타임 처리)
- Interface : 일종의 밑그림만 그려져 있는 기본 설계도. 다른 클래스를 작성하는데 도움을 준다.
- Enumeration : 형식이 안전한 특별한 종류의 클래스.

|Reference Type |Primitive Type|
|---|---|
|미리 정의 되지 않는다.(문자열 제외)|Java에서 미리 정의되어 있다.
|대문자로 시작|소문자로 시작
|크기 모두 동일|종류에 따라 다름
|메서드를 호출하거나 호출하는데 사용된다.|기본 유형으로 메서드를 호출할 수 없다.
|null이 될 수 있음.|null이 될 수 없음.
|클래스, 배열, 문자열, 인터페이스, 주석, 열거형|int, float, double, long, short, byte, char, boolean
|JVM이 기본적으로 각 참조 변수에 대해 8바이트를 할당|데이터 유형에 따라 다르다.
|ex) Class c1;|ex) int num = 369;

#### 리터럴
고정된 값의  소스 코드 구현
```java
int length = 150; // 150이 리터럴이다.
```

#### 변수 선언 및 초기화 방법
Java에서 모든 변수를 사용하려면 '선언'을 해줘야 한다.
```java
int num = 7;
```
```java
int num; // num이라는 정수형 변수를 선언
num = 7; // 7로 num을 초기화
```
** 즉, num이라는 변수를 `선언`하고 7로 `초기화`한다는 뜻이다.**

#### 변수의 스코프와 라이프타임
- 스코프 : 변수에 접근할 수 있는 프로그램 영역 또는 섹션
- 라이프타임 : 변수가 메모리에 얼마나 오래 남아있는지를 나타냄

**변수의 스코프와 라이프타임은 `변수가 정의되는 위치와 방법`에 따라 정의된다.** 변수는 3가지 타입이 존재한다.
	1. Instance Variable
    2. Class Variable
    3. Local Variable
각 유형의 스코프와 라이프타임에 대해서 자세하게 알아보자.
#### Instance Variable
클래스 내부에서 선언된다. 클래스 안에선 메서드와 블록 외부에 선언된다.
**Scope** : static 메서드를 제외한 전체
**Lifetime** : 클래스의 객체가 메모리에 남아있을 때까지

#### Class Variable
클래스 내부, 모든 블록 밖에 선언된다. 정적으로 선언된다.
**Scope** : 클래스 안
**Lifetime** : 프로그램이 종료될때까지

#### Local Variable
인스턴스, 클래스 변수가 아닌 변수
**Scope** : 블록 내
**Lifetime** : 선언된 블록을 떠날때까지

```java
class Variable {
	int iv;          // Instance Variable
    static int cv;   // Class Variable

    void method() {
    	int lv = 0;  // Local Variable
    }
}
```
좀 더 자세히 살펴보자.
![](https://velog.velcdn.com/images/hansolo/post/3801493c-eee8-4eac-b003-1f9cd0d1ce8a/image.png)![](https://velog.velcdn.com/images/hansolo/post/9c165216-f6a0-4ee7-919a-0183ca8d85a8/image.png)위의 예제 코드에서 num1과 num2는 인스턴스 변수, result는 클래스 변수, a와 b는 지역 변수라는 걸 알 수 있다. 다음은 위의 코드를 살짝 변형해보자.![](https://velog.velcdn.com/images/hansolo/post/9f53c21c-dedb-420d-b4f0-b7f936c3d59f/image.png)![](https://velog.velcdn.com/images/hansolo/post/eba83df2-8fa8-4621-944a-4406b0017b30/image.png)13, 14, 15번 라인에서 에러가 났다. 에러 내용은 'static이 안붙은 변수는 static method에 올 수 없다' 이다.

- num1 : num1는 인스턴스 변수이기 때문에 static 메서드에 올 수 없다.
- result : 위의 코드에서 static을 없앴기 때문에 인스턴스 변수가 됐다. 인스턴스 변수는 static 메서드에 올 수 없다.

#### 타입 변환 캐스팅 그리고 타입 프로모션
- 타입 변환 : 연산을 할 때 같은 타입끼리만 수행이 가능하다. 따라서 , 타입이 다른 경우 같게 만들어줘야 한다.

- 캐스팅(casting) : 변수 ,상수의 타입을 다른 타입으로 변환하는 것 (큰 타입 → 작은 타입)
- 타입 프로모션 : 자동 형변환. 컴파일러가 생략된 형변환을 자동적으로 추가한다. (작은 타입 → 큰 타입)


#### 1차 및 2차 배열 선언하기
- 배열이란? `같은 타입`의 여러 변수들을 하나로 묶은 것.
![](https://velog.velcdn.com/images/hansolo/post/72b53419-03e3-4dca-8f7b-c6b9fb1f0d8b/image.png)길이가 10인 배열을 생성했다고 가정해보자. 각각의 자리마다 순서대로 인덱스를 갖게 된다. 주의해야 될 점은 First index는 `0`번째가 되고 마지막 인덱스는 `9`번째로 받아들여 진다는 점이다.

- 배열의 생성
 ```java
int[] Arr = new int[3];
// 타입[] 변수이름;  배열을 선언함. (배열을 다루기 위해서 참조 변수를 선언한다.)
// 변수이름 = new 타입[길이]; 배열을 생성함. (실제 저장 공간을 생성한다.)
- 배열의 길이 : 배열이름.length ⇒ 상수
 ```java
 // 1차 배열
int[] score = new int[5];
for (int i = 0; i < score.length; i++) {
    System.out.println("score[i]")
}
// 2차 배열
int [][] score = new int[2][5];    // 2행 5열의 배열을 생성
for (int i = 0; i < score.length; i++) {
    for (int j = 0; j < score[i].length; j++) {
        score[i][j] = 10;
    }
}

## 타입 추론, var
JDk 10 이상에서는 `var`식별자를 사용하여 null이 아닌 초기화로 지역 변수(local variable)을 선언할 수 있어 읽기 쉬운 코드를 작성하는데 도움을 준다.

Java 8
```java
String a = "Hello";
String b = "Bye";
```
Java 10
```java
var a = "Hello";
var b = "Bye";
```
위와 같이 타입을 명시적으로 적어주지 않아도 컴파일러가 컴파일 단계에서 타입을 유추해준다.

---

#### Reference
- <https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html>
- <https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html>
- <https://www.javatpoint.com/reference-data-types-in-java>
- <https://www.learningjournal.guru/article/programming-in-java/scope-and-lifetime-of-a-variable/>
- <https://docs.oracle.com/en/java/javase/20/language/local-variable-type-inference.html#GUID-D2C58FE6-1065-4B50-9326-57DD8EC358AC>
- [남궁성, Java의 정석(도우출판, 2016.01.27)](https://product.kyobobook.co.kr/detail/S000001550352)

