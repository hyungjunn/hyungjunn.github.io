#### 본 게시글은 백기선님의 자바 라이브 스터디를 진행하기 위한 정리 자료입니다.

#### 링크
[시즌1 자바 기초 스터디](https://github.com/whiteship/live-study/wiki/%EC%8B%9C%EC%A6%8C-1-%EC%9E%90%EB%B0%94-%EA%B8%B0%EC%B4%88-%EC%8A%A4%ED%84%B0%EB%94%94)


## 목표
자바 소스 파일(.java)을 JVM으로 실행하는 과정 이해하기

## 학습할 것
- JVM이란 무엇인가
- 컴파일 하는 방법
- 실행하는 방법
- 바이트 코드란 무엇인가
- JIT 컴파일러란 무엇이며 어떻게 동작하는지
- JVM의 구성 요소
- JDK와 JRE의 차이
---

# JVM이란 무엇인가
### JVM(Java Virtual Machine, 자바 가상 머신)
- 자바 플랫폼을 위한 가상 머신
- 다양한 하드웨어 기반 플랫폼으로 포팅된다.
>#### A Java virtual machine (JVM) is a virtual machine that enables a computer to run Java programs as well as programs written in other languages that are also compiled to Java bytecode. 
-Wikipedia-

- 즉, 자바 바이트 코드를 실행시키기 위한 Virtual Machine(가상 컴퓨터)
![](https://velog.velcdn.com/images/hansolo/post/2c86d21e-940f-4b8d-b52c-035f387213ed/image.png)
**Java는 OS에 독립적이다. 하지만, JVM은 OS의존적이다.**

### 컴파일 하는 방법
- 컴파일(Compile)의 사전적 정의 : (프로그램을) 다른 부호(기계어)로 번역한다.
- Interprete : 실시간으로 컴퓨터에게 통역한다.
- 컴파일(Compile)이란? 자바 확장자가 붙은 소스 코드를 클래스 확장자가 붙은 파일로 바꾸는 것
- 컴파일러의 역활 : 자바 확장자 → 클래스 확장자 

### 실행하는 방법
- Run : 클래스 확장자가 붙은 파일을 실행하는 것
- Input : 우리가 실행을 할 때, 입력값을 주는 것. 입력값에 따라 출력값이 다르다. 
![](https://velog.velcdn.com/images/hansolo/post/053609c7-82d8-427d-a180-6685678dad2e/image.png)
- javac : The Java programming language compiler, 즉, Java 컴파일러의 명령어. (자바 확장자 소스 코드를 컴파일하여 클래스 확장자로 바꿔준다. )

### 바이트코드란 무엇인가?
- 자바 소스 코드 : 사람이 볼 수 있는 코드
- 바이트코드 : Java Virtual Machine이 이해하는 코드. 명령어의 크기가 1byte라 바이트코드라 불림.

**따라서, ‘javac’ 명령어를 사용해 자바 소스 코드 → 바이트코드. 즉, 사람이 눈으로 보고 있는 것 → JVM이 받아들일 수 있는것 → JVM이 실행**
![](https://velog.velcdn.com/images/hansolo/post/350850b0-516a-40da-b768-d8ffb60d3e28/image.png)javap -c명령어로 바이트코드를 볼 수 있다. 

### JIT 컴파일러란 무엇이며 어떻게 동작하는지
- Just-In-Time compiler. 컴파일을 할 때 바이트 코드를 읽고 빠르게 기계어를 생성시켜준다.(바이트코드 -> 기계어)
![](https://velog.velcdn.com/images/hansolo/post/a819e43d-437a-4b27-8f1c-7d232ba74323/image.png)


### JVM 구성요소
![](https://velog.velcdn.com/images/hansolo/post/09d4ea93-b787-49d1-9f11-daa875e2d534/image.png "JVM architecture")[출처]:https://en.wikipedia.org/wiki/Java_virtual_machine#/media/File:JvmSpec7.png
- ClassLoader : 클래스와 인터페이스를 생성한다.
- Execution Engine : 클래스를 실행한다.
- Run-Time Data Areas
    - Method Area
    - Heap
    - Stacks
    - PC Registers
- Native Method Interface

### JDK와 JRE의 차이
- JDK : Java Development Kit로 자바로 개발하기 위한 툴과 라이브러리 모음집이다. JDK에는 컴파일러,   자바 런타임 환경, 툴, 클래스 라이브러리가 있다.

- JRE : 자바 런타임 환경(Java Runtime Envirinment). 자바 응용 프로그램을 실행시키기 위한 것이다.

---

#### Reference
<https://docs.oracle.com/javase/tutorial/getStarted/intro/definition.html>
<https://docs.oracle.com/javase/tutorial/getStarted/cupojava/unix.html>
[남궁성, Java의 정석(도우출판, 2016.01.27)](https://product.kyobobook.co.kr/detail/S000001550352)



